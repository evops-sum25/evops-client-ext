syntax = "proto3";
package evops.api.v1;

import "google/protobuf/timestamp.proto";

// Manages event-related operations.
service EventService {
  // Lists all events.
  rpc List(EventServiceListRequest) returns (EventServiceListResponse);
  // Creates a new event.
  rpc Create(EventServiceCreateRequest) returns (EventServiceCreateResponse);
  // Retrieves a single event by ID.
  rpc Find(EventServiceFindRequest) returns (EventServiceFindResponse);
  // Adds a new image to the event with the specified ID.
  rpc PushImage(stream EventServicePushImageRequest)
      returns (EventServicePushImageResponse);
  // Retrieves an event image by ID.
  rpc FindImage(EventServiceFindImageRequest)
      returns (stream EventServiceFindImageResponse);
}

service LanguageService {
  // Adds a new language to the system.
  rpc Add(LanguageServiceAddRequest) returns (LanguageServiceAddResponse);
}

// Manages event tags.
service TagService {
  // Lists all tags.
  rpc List(TagServiceListRequest) returns (TagServiceListResponse);
  // Creates a new tag.
  rpc Create(TagServiceCreateRequest) returns (TagServiceCreateResponse);
  // Retrieves a tag by ID.
  rpc Find(TagServiceFindRequest) returns (TagServiceFindResponse);
  // Get relevant tag IDs for an event description.
  rpc GetTagsByDescription(TagServiceGetTagsByDescriptionRequest)
      returns (TagServiceGetTagsByDescriptionResponse);
}

// Manages user accounts.
service UserService {
  // Lists all users.
  rpc List(UserServiceListRequest) returns (UserServiceListResponse);
  // Creates a new user.
  rpc Create(UserServiceCreateRequest) returns (UserServiceCreateResponse);
  // Retrieves a user by ID.
  rpc Find(UserServiceFindRequest) returns (UserServiceFindResponse);
}

message LanguageServiceAddRequest {
  // Name of the new language.
  string name = 1;
}

message LanguageServiceAddResponse {
  // UUID of the added language.
  string language_id = 1;
}

message TagServiceGetTagsByDescriptionRequest {
  // Description to predict tags for.
  string description = 1;
}

message TagServiceGetTagsByDescriptionResponse {
  // A list of predicted tag IDs for a description.
  repeated string tag_ids = 1;
}

message EventServiceFindImageRequest {
  // UUID of the event image to retrieve.
  string image_id = 1;
}

message EventServiceFindImageResponse {
  bytes chunk = 1;
}

message EventImageMetadata {
  // UUID of the event to add an image to.
  string event_id = 1;
}

message EventServicePushImageRequest {
  oneof message {
    EventImageMetadata metadata = 1;
    bytes chunk = 2;
  }
}

message EventServicePushImageResponse {
  // ID of the added image.
  string image_id = 1;
}

message EventServiceFindRequest {
  // UUID of the event to retrieve.
  string id = 1;
}

message EventServiceFindResponse {
  // Retrieved event object.
  Event event = 1;
}

message TagServiceFindRequest {
  // UUID of the tag to retrieve.
  string id = 1;
}

message TagServiceFindResponse {
  // Retrieved tag object.
  Tag tag = 1;
}

message UserServiceFindRequest {
  // UUID of the user to retrieve.
  string id = 1;
}

message UserServiceFindResponse {
  // Retrieved user object.
  User user = 1;
}

message EventServiceListRequest {
  // Id of last event (optional).
  optional string last_id = 1;
  // Batch size (optional).
  optional int64 limit = 2;
}

message EventServiceListResponse {
  // List of all events.
  repeated Event events = 1;
}

message TagServiceListRequest {
  // Id of last tag (optional).
  optional string last_id = 1;
  // Batch size (optional).
  optional int64 limit = 2;
}

message TagServiceListResponse {
  // List of all tags.
  repeated Tag tags = 1;
}

message UserServiceListRequest {}

message UserServiceListResponse {
  // List of all users.
  repeated User users = 1;
}

message EventServiceCreateRequest {
  // Data for creating a new event.
  NewEventForm form = 1;
}

message EventServiceCreateResponse {
  // ID of the created event.
  string event_id = 1;
}

message NewEventForm {
  // **Required**. Event title.
  string title = 1;
  // **Required**. UUID of the creating user.
  string author_id = 2;
  // **Required**. Detailed description.
  string description = 3;
  // UUIDs of associated tags.
  repeated string tag_ids = 4;
  // Whether to enable attendance tracking.
  bool with_attendance = 5;
}

message Event {
  // Event UUID.
  string id = 1;
  // Event title.
  string title = 2;
  // User who created the event.
  User author = 3;
  // Detailed description.
  string description = 4;
  // UUIDs of event images.
  repeated string image_ids = 5;
  // Associated tags.
  repeated Tag tags = 6;
  // Whether attendance tracking is enabled.
  bool with_attendance = 7;
  // Creation timestamp.
  google.protobuf.Timestamp created_at = 8;
  // Last modification timestamp.
  google.protobuf.Timestamp modified_at = 9;
}

message TagServiceCreateRequest {
  // Data for creating a new tag.
  NewTagForm form = 1;
}

message TagServiceCreateResponse {
  // ID of the created tag.
  string tag_id = 1;
}

message NewTagForm {
  // **Required**. Unique name.
  string name = 1;
  // Alternative names.
  repeated string aliases = 2;
}

message Tag {
  // Tag UUID.
  string id = 1;
  // Unique name (e.g., `"Music"`, `"Tech"`).
  string name = 2;
  // Alternative names (e.g., `["Concert", "Gig"]` for `"Music"`).
  repeated string aliases = 3;
}

message UserServiceCreateRequest {
  // Data for creating a new user.
  NewUserForm form = 1;
}

message UserServiceCreateResponse {
  // ID of the created user.
  string user_id = 1;
}

message NewUserForm {
  // **Required**. Display name.
  string name = 1;
}

message User {
  // User UUID.
  string id = 1;
  // Display name.
  string name = 2;
}
